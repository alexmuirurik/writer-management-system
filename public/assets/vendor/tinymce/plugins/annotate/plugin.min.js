tinymce.PluginManager.add('annotate', function (editor, url) {
    editor.ui.registry.addButton('annotate', {
        icon: 'comment-add', 
        tooltip: 'Insert/edit Comment',
        onAction: function() {
            const container = document.createElement("div");

            var textarea = document.createElement('textarea')
            textarea.rows = 6
            textarea.className = 'swal-content__textarea'
            textarea.placeholder = 'Any comments?'
            // You could also use container.innerHTML to set the content.
            container.append(textarea);
            swal({
                content: container,
                buttons: ["Close", "Post a Comment"],
                dangerMode: false,

            }).then((willDelete) => {
                if (willDelete) {
                    comment = $('.swal-content__textarea').val()
                    if(comment === null || comment === ''){
                        comment = null
                    }

                    if(comment){
                        editor.annotator.annotate('alpha', {
                            author  : $('.vname').val(),
                            comment : comment
                        })                         
                    }
                    editor.focus();
                }
            })
        },
        onpostrender: monitorNodeChange 
    })

    $('.commentactived .float-right').click(function(){
        itemid    =  $(this).attr('id')
        deletecomment(itemid)
        editor.annotator.remove('alpha')
    })

    $('.viewcomment a').click(function(){
        var uid     =   $(this).attr('id')
        var my_span =   editor.getBody().querySelector('[data-mce-annotation-uid = "'+uid+'"]')
        console.log(my_span)
        my_span.scrollIntoView()
        document.body.scrollTop = document.documentElement.scrollTop = 0;
    })

    editor.ui.registry.addButton('delete-annotation', {
        tooltip: 'Remove Comment',
        icon: 'remove',
        onAction: function() {
            itemid    =   $('.commentactived .float-right').attr('id')
            deletecomment(itemid)
            editor.annotator.remove('alpha')
        }
    })

    editor.on('init', function() {
        editor.annotator.register('alpha', {
          persistent: true,
          decorate: function (uid, data) {
            var receiver = $('.vname').attr('value')
            var task = $('.tname').attr('value')
            var chat = $('#message')
            if (!receiver) {
                return chat.val("")
            }
            htm = '<div class="outgoing_msg"> <div class="sent_msg"><span class="time_date">Direct Message...</span><p>'+comment+'</p><span class="time_date">1 second ago</span></div></div>'

            $('.msg_history').append(htm)
            $('.msg_history').scrollTop($('.msg_history')[0].scrollHeight)

            $.ajax({
                type: "POST",
                url: "/message/" + task,
                data: { 'comment': 'comment', 'content': data.comment, 'receiver': receiver, 'uid': uid},
                success: function (msg) {
                    if (msg === 'Created') {
                        showsidevar('edits')
                        return getedits()
                    }
                    blackDashboard.showDangerMessage(msg)
                },
            })

            return {
              attributes: {
                'data-mce-comment': data.comment ? data.comment : 'non',
                'data-mce-author': data.author ? data.author : 'user'
              }
            }
          }
        })

        editor.annotator.annotationChanged('alpha', (state, name, obj) => {
            $('.msg_history p').css('background-color', '')
            $('.outgoing_msg').removeClass('commentactived')
            $('.incoming_msg').removeClass('commentactived')
            if (state === false) {
                // NOTE: name will be 'alpha' here
                $('.msg_history p').css('background-color', '')
                $('.outgoing_msg').removeClass('commentactived')
                $('.incoming_msg').removeClass('commentactived')
            } else {
                comments    =   obj.nodes[0]
                uid         =   obj.uid;
                showsidevar('edits')
                scrollto(`${uid}`)
            }
        });
    }) 
  

    function scrollto(id){
        topPos = document.getElementById(id).offsetTop
        $("#"+id).addClass('commentactived')
        $("#"+id+ ' p').css('background-color', 'rgb(241, 196, 15)')
        $('.msg_history').animate({scrollTop:(topPos - 10)}, 100);
    }

    function monitorNodeChange() { 
        var btn = this; 
        editor.on('NodeChange', function (e) { 
            btn.active(isAnnotation(editor.selection.getNode())) 
        }); 
        
        editor.on('dblclick', function (e) { 
            if (annotationSelected = isAnnotation(e.target)) { 
                btn.active(annotationSelected); 
                showTooltip(e, $(e.target)[0].closest('.annotation')) 
            } 
        }) 
    }

    function showTooltip(e, elm) {
        var tooltipText = editor.dom.getAttrib(elm, 'data-annotation-value'); 
        var xPos = e.clientX + Math.max(Math.round($('#canvas_ifr').offset().left) - ($('#editPaperWindow').width() / 2), 0); 
        var yPos = e.clientY + Math.round($('#canvas_ifr').offset().top) - $('#editPaperWindow').height() - 30; if ($('#editPaperWindow').offset().left + $('#editPaperWindow').width() > $(window).width()) { xPos = $(window).width() - $('#editPaperWindow').width() - 30 }
        $('.mce-annotation').html(HTMLfromStr(tooltipText)); 
        $('.mce-annotation').css({ "left": xPos + "px", "top": yPos + "px", "display": "block" })
    }

    function HTMLfromStr(rawStr) { 
        return (rawStr + "").replace(/&#\d+;/gm, function (s) { return String.fromCharCode(s.match(/\d+/gm)[0]) }) 
    }

    function isAnnotation(elm) { 
        var tempElem = $(elm).closest('.annotation'); return elm && ($(tempElem).hasClass("annotation")) ? !0 : !1 
    }



    function HTMLfromStr(rawStr) { 
        return (rawStr + "").replace(/&#\d+;/gm, function (s) { 
            return String.fromCharCode(s.match(/\d+/gm)[0]) 
        }) 
    }
})